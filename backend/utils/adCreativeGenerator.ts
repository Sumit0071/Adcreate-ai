import { GoogleGenAI, Modality } from "@google/genai";
import * as fs from "node:fs";

export interface AdData {
  businessname: string;
  niche: string;
  productService: string;
  adGoal: string;
  targetAudience: string;
}

const geminiApiKey = process.env.GEMINI_API_KEY;
if (!geminiApiKey) {
  throw new Error("‚ùå Gemini API key is not set in environment variables.");
}

const ai = new GoogleGenAI({ apiKey: geminiApiKey });

// Helper: wait function
const wait = (ms: number) => new Promise((res) => setTimeout(res, ms));

// Generic retry wrapper
async function withRetry<T>(fn: () => Promise<T>, retries = 3): Promise<T> {
  while (retries > 0) {
    try {
      return await fn();
    } catch (error: any) {
      if (error.status === 429) {
        const retryDelay =
          error.retryDelay ? parseInt(error.retryDelay) * 1000 : 15000;
        console.warn(`‚ö†Ô∏è Rate limited. Retrying in ${retryDelay / 1000}s...`);
        await wait(retryDelay);
        retries--;
      } else {
        throw error;
      }
    }
  }
  throw new Error("‚ùå Failed after multiple retries due to rate limits.");
}

export const generateAdsequence = async (data: AdData) => {
  const { businessname, niche, productService, adGoal, targetAudience } = data;

  // Step 1: Generate ad copy (text)
  const textPrompt = `
  Create a **Facebook ad copy** for the business: "${businessname}".
  - Niche: ${niche}
  - Product/Service: ${productService}
  - Goal: ${adGoal}
  - Target Audience: ${targetAudience}

  Requirements:
  - Provide Headline, Body text, and CTA.
  - Make it persuasive & professional.
  `;

  const textResponse = await withRetry(() =>
    ai.models.generateContent({
      model: "gemini-1.5-flash",
      contents: textPrompt,
    })
  );

  let adCopy = "";
  const textParts = textResponse.candidates?.[0]?.content?.parts ?? [];
  for (const part of textParts) {
    if (part.text) {
      adCopy += part.text + "\n";
    }
  }
  adCopy = adCopy.trim();

  if (adCopy) {
    console.log("\nüì¢ Generated Ad Copy:\n");
    console.log(adCopy);
  } else {
    console.warn("‚ö†Ô∏è No ad copy generated.");
  }

  // Step 2: Generate ad creative (image)
  const imagePrompt = `
  Design a **Facebook ad creative** for "${businessname}".
  - It should visually represent: ${productService}
  - Style: modern, professional, and eye-catching.
  - Suitable for ${targetAudience}.
  `;

  let imageSaved = false;
  try {
    const imageResponse = await withRetry(() =>
      ai.models.generateContent({
        model: "gemini-2.5-flash-image-preview",
        contents: imagePrompt,
      })
    );

    const imageParts = imageResponse.candidates?.[0]?.content?.parts ?? [];
    for (const part of imageParts) {
      if (part.inlineData?.data) {
        const buffer = Buffer.from(part.inlineData.data, "base64");
        const fileName = "facebook-ad-creative.png";
        fs.writeFileSync(fileName, buffer);
        console.log(`‚úÖ Image saved as ${fileName}`);
        imageSaved = true;
      }
    }

    if (!imageSaved) {
      console.warn("‚ö†Ô∏è No image was generated by Gemini.");
    }
  } catch (err: any) {
    console.error(err);
    console.warn("‚ö†Ô∏è Image generation skipped ‚Äî quota exceeded or API error.");
  }

  return { adCopy, imageSaved };
};
